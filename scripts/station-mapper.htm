<!DOCTYPE html>
<html>
    <head>
        <title>TaxE Station Mapper</title>
        <style type="text/css">
            body{margin: 0;font-family:Arial, Helvetica, sans-serif}
            header{background-color: #323232;color:#EDEDED;padding:8px 8px 8px 8px}
            h1{margin:0;padding:0;padding-right:16px;display:inline-block}
            header nav{display: inline-block}
            header nav ul{margin:0;padding:0}
            header nav ul li{display:inline-block;list-style-type: none;padding-right:8px}
            header nav ul li a{color:inherit}
            
            #map{margin-left:auto;margin-right:auto;position: relative}
            .station{width:16px;width:16px;background-color:red;position:absolute;z-index:300;color: red;}
            .connection{position:absolute;z-index:200;color:black}
            
            #tooltip{display:none;z-index:500;position: fixed;height:16px;padding:4px 4px 4px 4px;background-color: #323232;color: #EDEDED}
            
            #over{z-index:1000;top:0px;left:0px;width:100%;height:100%;background-color: rgba(32,32,32,0.8);display:none;position:fixed;}
            #over aside{text-align:center;background-color:#EDEDED;z-index:1100;width:300px;height:300px;margin-left:auto;margin-right: auto;margin-top:200px;display:none}
            
            #downloader{display:none}
            
            footer{background-color:#323232;color: #EDEDED;padding:2px 2px 2px 2px;font-size:0.6em}
            footer ul{margin:0;padding:0}
            footer ul li{display:inline-block;list-style-type: none;padding-right:8px}
            footer ul li a{color:inherit}
        </style>
        <script type="text/javascript">
            var Station = function(name,x,y, junction){
                if(junction == null){junction = false;}
                this.name = name;
                this.junction = junction;
                if(x == null){x = 0;}
                if(y == null){y = 0;}
                this.x = x;
                this.y = y;
            }
            var stations = {};
            
            var Connection = function(station1, station2){
                this.station1 = station1;
                this.station2 = station2;
            }
            var connections = {};
            
            var mode = "edit";
            
            var loadedFile = "";
            
            function loadMap(height, width, image){
                if(width == null){width = 1000;}
                if(height == null){height = 750}
                if(image == null){image = "http://localhost:63342/FVS-3/core/assets/game-map-for-editor.png";}
                                
                with(window.document.getElementById("map")){
                    while(firstChild){
                        removeChild(firstChild);
                    }
                    style.backgroundImage = "url('" + image + "')";
                    style.height = height + "px";
                    style.width = width + "px";
                }
                
                if(window.document.getElementById("over-filepath-file").files[0]){
                    var file = window.document.getElementById("over-filepath-file").files[0];
                    var fr  = new FileReader;
                    fr.onload = function(theFile){
                        loadedFile = theFile.name;
                        return function(event){
                            var config = JSON.parse(event.target.result);
                            for(station in config.stations){
                                with(config.stations[station]){
                                    stations[name] = new Station(name, x, parseInt(window.document.getElementById("map").style.height.replace("px",""))-y, junction);
                                    drawStation(name);
                                }
                            }
                            for(connection in config.connections){
                                with(config.connections[connection]){
                                    var connectionName = station1 + "-" + station2;
                                    connections[connectionName] = new Connection(station1, station2);
                                    drawConnection(connectionName);
                                }
                            }
                        };
                    }(file);
                    fr.readAsText(file);
                }
            }
            
            function saveMap(){
                var stationArray = [];
                for(station in stations){
					if(stations[station] != null){
						stationArray.push(stations[station]);
						stationArray[stationArray.length-1].y = parseInt(window.document.getElementById("map").style.height.replace("px","")) - stationArray[stationArray.length-1].y;
					}
                }
                var connectionArray = [];
                for(connection in connections){
					if(connections[connection] != null){
						connectionArray.push(connections[connection]);
					}
                }
                var outputJSON = {stations: stationArray, connections: connectionArray};
                var url = "data:text/json;charset=utf8," + encodeURIComponent(JSON.stringify(outputJSON));
                var downloader = window.document.createElement("a");
                downloader.href = url;
                downloader.download = loadedFile;
                downloader.onclick = function(){
                    window.clearTimeout(saveTimeout);
                }
                saveTimeout = window.setTimeout(function(){
                    if(navigator.msSaveBlob){
                        var blob = new Blob([JSON.stringify(outputJSON)],{type: 'text/json'});
                        navigator.msSaveBlob(blob, loadedFile);
                    }else{
                        window.open(url, "downloader");
                        window.focus();
                    }
                },1000);
                downloader.click();
            }
            
            function showOver(id){
                window.document.getElementById("over").style.display = "block";
                window.document.getElementById("over-" + id).style.display = "block";
            }
            
            function hideOver(id){
                window.document.getElementById("over").style.display = "none";
                window.document.getElementById("over-" + id).style.display = "none";
            }
            
            function addStation(){
                showOver("stationNew");
            }
            
            function createStation(){
                hideOver("stationNew");
                var name = window.document.getElementById("over-stationNew-name").value;
                stations[name] = new Station(name,0,0);
                drawStation(name);
                repositionStation(name);
            }
            
            function drawStation(name){
                var newStation = window.document.createElement("div");
                newStation.setAttribute("id","station-" + name);
                newStation.setAttribute("class","station");
                newStation.setAttribute("onclick","clickStation('" + name + "')");
                newStation.style.top = stations[name].y + "px";
                newStation.style.left = stations[name].x + "px";
                if(stations[name].junction == true){
                    newStation.style.color = "blue";
                    newStation.style.backgroundColor = "blue";
                }
                newStation.appendChild(window.document.createTextNode('-'));
                window.document.getElementById("map").appendChild(newStation);
            }
            
            function clickStation(name){
                if(mode == "edit"){
                    editStation(name);
                }else if(mode == "connect"){
                    completeConnect(name);
                }
            }
            
            function editStation(name){
                window.document.getElementById("over-stationEdit-name").innerHTML = name;
                if(stations[name].junction == true){
                    window.document.getElementById("over-stationEdit-type").innerHTML = "Change to Station";
                }else{
                    window.document.getElementById("over-stationEdit-type").innerHTML = "Change to Junction";
                }
                showOver("stationEdit");
            }
            
            var positioningFunction = function(event){
                this.style.top = (event.pageY - window.document.getElementsByTagName("header")[0].offsetHeight - 8) + "px";
                this.style.left = (event.pageX - parseInt(window.getComputedStyle(window.document.getElementById("map")).marginLeft.replace("px","")) - 8) + "px";
            };
            
            var positioningFinish = function(event){
                this.onmousedown = null;
                window.onmousemove = null;
                this.onmousemove = null;
                var name = this.getAttribute("id").split("-")[1];
                stations[name] = new Station(name, this.style.left.replace("px",""), this.style.top.replace("px",""));
                for(connection in connections){
                    if(connections[connection].station1 == name || connections[connection].station2 == name){
                        drawConnection(connection);
                    }
                }
                mode = "edit";
            };
            
            function repositionStation(name){
                hideOver("stationEdit");
                mode = "position";
                with(window.document.getElementById("station-" + name)){
                    onmousemove = positioningFunction;
                    onmousedown = positioningFinish;
                }
                window.onmousemove = function(event){
                    window.onmousemove = null;
                    with(window.document.getElementById("station-" + name)){
                        style.top = (event.pageY - window.document.getElementsByTagName("header")[0].offsetHeight - 8) + "px";
                        style.left = (event.pageX - parseInt(window.getComputedStyle(window.document.getElementById("map")).marginLeft.replace("px","")) - 8) + "px";
                    }
                }
            }
            
            function toggleStationType(name){
                hideOver("stationEdit");
                if(stations[name].junction == true){
                    stations[name].junction = false;
                    with(window.document.getElementById("station-" + name)){
                        style.backgroundColor = "red";
                        style.color = "red";
                    }
                }else{
                    stations[name].junction = true;
                    with(window.document.getElementById("station-" + name)){
                        style.backgroundColor = "blue";
                        style.color = "blue";
                    }
                }
            }
            
            function removeStation(name){
                hideOver("stationEdit");
                window.document.getElementById("map").removeChild(window.document.getElementById("station-" + name));
                stations[name] = null;
                for(connection in connections){
                    if(connections[connection].station1 == name || connections[connection].station2 == name){
                        removeConnection(connection);
                    }
                }
            }
            
            function startConnectStation(name){
                hideOver("stationEdit");
                mode = "connect";
            }
            
            function completeConnect(name){
                var originalName = window.document.getElementById("over-stationEdit-name").innerHTML;
                if(name !=  originalName){
                    var connectionName = originalName + "-" + name;
                    connections[connectionName] = new Connection(originalName, name);
                    drawConnection(connectionName);
                }
                mode = "edit";
            }
            
            function drawConnection(connectionName){
                if(window.document.getElementById("connection-" + connectionName)){
                    window.document.getElementById("map").removeChild(window.document.getElementById("connection-" + connectionName));
                }
                var names = connectionName.split("-");
                var connection  = window.document.createElement("canvas");
                connection.setAttribute("id","connection-" + connectionName);
                connection.setAttribute("class","connection");
                connection.setAttribute("onclick","connectionEdit('" + connectionName + "');");
                var leftX, topY, rightX, bottomY;
                if(stations[names[0]].x < stations[names[1]].x){
                    leftX = stations[names[0]].x;
                    rightX = stations[names[1]].x;
                }else{
                    leftX = stations[names[1]].x;
                    rightX = stations[names[0]].x;
                }
                if(stations[names[0]].y < stations[names[1]].y){
                    topY = stations[names[0]].y;
                    bottomY = stations[names[1]].y;
                }else{
                    topY = stations[names[1]].y;
                    bottomY = stations[names[0]].y;
                }
                connection.setAttribute("style","top:" + (parseInt(topY)+8) + "px;left:" + (parseInt(leftX)+8) + "px;width:" + (rightX-leftX) + "px;height:" + (bottomY-topY) + "px");
                connection.setAttribute("width",(rightX-leftX));
                connection.setAttribute("height",(bottomY-topY));
                //connection.onmouseover = showTooltip;
                var drawContext = connection.getContext("2d");
                drawContext.beginPath();
                drawContext.lineWidth = 2;
                if((stations[names[0]].x < stations[names[1]].x && stations[names[0]].y < stations[names[1]].y) || (stations[names[0]].x > stations[names[1]].x && stations[names[0]].y > stations[names[1]].y)){
                    drawContext.moveTo(0,0);
                    drawContext.lineTo((rightX-leftX),(bottomY-topY));
                }else{
                    drawContext.moveTo(0,(bottomY-topY));
                    drawContext.lineTo((rightX-leftX),0);
                }
                drawContext.stroke();
                window.document.getElementById("map").appendChild(connection);
            }
            
            function connectionEdit(name){
                window.document.getElementById("over-connectionEdit-name").innerHTML = name;
                showOver("connectionEdit");
            }
            
            function removeConnection(name){
                window.document.getElementById("map").removeChild(window.document.getElementById("connection-" + name));
                connections[name] = null;
            }
            
            var tooltipTimeout;
            
            /*function showTooltip(event){
                var nameParts = this.getAttribute("id").split("-");
                var name = "";
                for(var i = 1; i<nameParts.length; i++){
                    if(i != 1){
                        name += "-";
                    }
                    name += nameParts[i];
                }
                with(window.document.getElementById("tooltip")){
                    innerHTML = name;
                    style.top = event.pageY;
                    style.left = event.pageY;
                    style.display = "block";
                }
                window.clearTimeout(tooltipTimeout);
                tooltipTimeout = window.setTimeout(function(){
                    window.document.getElementById("tooltip").style.display = "none";
                },5000);
            }*/
        </script>
    </head>
    <body>
        <header>
            <h1>TaxE Station Mapper</h1>
            <nav><ul>
                <li id="nav-loadconfig"><a href="javascript:showOver('filepath');" title="Load Config">Load Config</a></li>
                <li id="nav-addstation"><a href="javascript:addStation();" title="Add Station">Add Station</a></li>
                <li id="nav-saveconfig"><a href="javascript:saveMap();" title="Save Config">Save Config</a></li>
            </ul></nav>
        </header>
        <div id="map">
            
        </div>
        <p id="tooltip"></p>
        <footer><ul>
            <li>&copy; FVS 2014</li>
            <li>Works best in <a href="http://www.google.com/chrome/browser/" title="Get Chrome" target="_blank">Google Chrome</a> (Most of the time)</li>
            <li>Failing that, IE will do (probably)</li>
        </ul></footer>
        <div id="over">
            <aside id="over-stationNew">
                <p>Please enter the station Name</p>
                <input type="text" id="over-stationNew-name" value="" /><br/>
                <button type="button" id="over-stationNew-cancel" onclick="hideOver('stationNew');">Cancel</button>
                <button type="button" id="over-stationNew-create" onclick="createStation();">Create</button>
            </aside>
            <aside id="over-stationEdit">
                <p>Station Name: <span id="over-stationEdit-name"></span></p><br/>
                <button type="button" id="over-stationEdit-position" onclick="repositionStation(window.document.getElementById('over-stationEdit-name').innerHTML);">Reposition</button><br/>
                <button type="button" id="over-stationEdit-connect" onclick="startConnectStation(window.document.getElementById('over-stationEdit-name').innerHTML);">Make Connection</button><br/>
                <button type="button" id="over-stationEdit-type" onclick="toggleStationType(window.document.getElementById('over-stationEdit-name').innerHTML);">Make Junction</button><br/>
                <button type="button" id="over-stationEdit-remove" onclick="removeStation(window.document.getElementById('over-stationEdit-name').innerHTML);">Remove</button><br/>
                <button type="button" id="over-stationEdit-close" onclick="hideOver('stationEdit');">Close</button>
            </aside>
            <aside id="over-connectionEdit">
                <p>Connection: <span id="over-connectionEdit-name"></span></p><br/>
                <button type="button" id="over-connectionEdit-remove" onclick="removeConnection(window.document.getElementById('over-connectionEdit-name').innerHTML);hideOver('connectionEdit');">Remove</button><br/>
                <button type="button" id="over-connectionEdit-close" onclick="hideOver('connectionEdit');">Close</button>
            </aside>
            <aside id="over-filepath">
                <p>Filepath for config file</p>
                <input type="file" id="over-filepath-file" value="" /><br/>
                <button type="button" id="over-filepath-close" onclick="hideOver('filepath');">Close</button>
                <button type="button" id="over-filepath-load" onclick="loadMap();hideOver('filepath');">Load</button>
            </aside>
        </div>
        <iframe id="downloader" name="downloader" src="about:blank">Get an up-to-date browser, seriously.  Have you, or your corporate IT department, not been alterted to the turn of the century yet?</iframe>
        <script type="text/javascript">
            showOver('filepath');
        </script>
    </body>
</html>